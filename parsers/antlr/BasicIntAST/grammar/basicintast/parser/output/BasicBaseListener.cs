//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\wellington\projects\lectures\compilers\parsers\antlr\BasicIntAST\grammar\basicintast\parser\Basic.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {

package basicintast.parser;
import basicintast.util.*;


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IBasicListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class BasicBaseListener : IBasicListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>programStmt</c>
	/// labeled alternative in <see cref="BasicParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgramStmt([NotNull] BasicParser.ProgramStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>programStmt</c>
	/// labeled alternative in <see cref="BasicParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgramStmt([NotNull] BasicParser.ProgramStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stmtPrint</c>
	/// labeled alternative in <see cref="BasicParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmtPrint([NotNull] BasicParser.StmtPrintContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stmtPrint</c>
	/// labeled alternative in <see cref="BasicParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmtPrint([NotNull] BasicParser.StmtPrintContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stmtRead</c>
	/// labeled alternative in <see cref="BasicParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmtRead([NotNull] BasicParser.StmtReadContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stmtRead</c>
	/// labeled alternative in <see cref="BasicParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmtRead([NotNull] BasicParser.StmtReadContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stmtAttr</c>
	/// labeled alternative in <see cref="BasicParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmtAttr([NotNull] BasicParser.StmtAttrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stmtAttr</c>
	/// labeled alternative in <see cref="BasicParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmtAttr([NotNull] BasicParser.StmtAttrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stmtExpr</c>
	/// labeled alternative in <see cref="BasicParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmtExpr([NotNull] BasicParser.StmtExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stmtExpr</c>
	/// labeled alternative in <see cref="BasicParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmtExpr([NotNull] BasicParser.StmtExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stmtCond</c>
	/// labeled alternative in <see cref="BasicParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStmtCond([NotNull] BasicParser.StmtCondContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stmtCond</c>
	/// labeled alternative in <see cref="BasicParser.stmt"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStmtCond([NotNull] BasicParser.StmtCondContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStmt</c>
	/// labeled alternative in <see cref="BasicParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStmt([NotNull] BasicParser.IfStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStmt</c>
	/// labeled alternative in <see cref="BasicParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStmt([NotNull] BasicParser.IfStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifElseStmt</c>
	/// labeled alternative in <see cref="BasicParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfElseStmt([NotNull] BasicParser.IfElseStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifElseStmt</c>
	/// labeled alternative in <see cref="BasicParser.cond"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfElseStmt([NotNull] BasicParser.IfElseStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>condExpresion</c>
	/// labeled alternative in <see cref="BasicParser.condExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondExpresion([NotNull] BasicParser.CondExpresionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>condExpresion</c>
	/// labeled alternative in <see cref="BasicParser.condExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondExpresion([NotNull] BasicParser.CondExpresionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>condRelOp</c>
	/// labeled alternative in <see cref="BasicParser.condExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCondRelOp([NotNull] BasicParser.CondRelOpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>condRelOp</c>
	/// labeled alternative in <see cref="BasicParser.condExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCondRelOp([NotNull] BasicParser.CondRelOpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>blockStmt</c>
	/// labeled alternative in <see cref="BasicParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStmt([NotNull] BasicParser.BlockStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>blockStmt</c>
	/// labeled alternative in <see cref="BasicParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStmt([NotNull] BasicParser.BlockStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>printStr</c>
	/// labeled alternative in <see cref="BasicParser.print"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrintStr([NotNull] BasicParser.PrintStrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>printStr</c>
	/// labeled alternative in <see cref="BasicParser.print"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrintStr([NotNull] BasicParser.PrintStrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>printExpr</c>
	/// labeled alternative in <see cref="BasicParser.print"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrintExpr([NotNull] BasicParser.PrintExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>printExpr</c>
	/// labeled alternative in <see cref="BasicParser.print"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrintExpr([NotNull] BasicParser.PrintExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>readVar</c>
	/// labeled alternative in <see cref="BasicParser.read"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReadVar([NotNull] BasicParser.ReadVarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>readVar</c>
	/// labeled alternative in <see cref="BasicParser.read"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReadVar([NotNull] BasicParser.ReadVarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>attrExpr</c>
	/// labeled alternative in <see cref="BasicParser.attr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAttrExpr([NotNull] BasicParser.AttrExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>attrExpr</c>
	/// labeled alternative in <see cref="BasicParser.attr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAttrExpr([NotNull] BasicParser.AttrExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprPlus</c>
	/// labeled alternative in <see cref="BasicParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprPlus([NotNull] BasicParser.ExprPlusContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprPlus</c>
	/// labeled alternative in <see cref="BasicParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprPlus([NotNull] BasicParser.ExprPlusContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprMinus</c>
	/// labeled alternative in <see cref="BasicParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprMinus([NotNull] BasicParser.ExprMinusContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprMinus</c>
	/// labeled alternative in <see cref="BasicParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprMinus([NotNull] BasicParser.ExprMinusContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expr1Empty</c>
	/// labeled alternative in <see cref="BasicParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr1Empty([NotNull] BasicParser.Expr1EmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expr1Empty</c>
	/// labeled alternative in <see cref="BasicParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr1Empty([NotNull] BasicParser.Expr1EmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expr1Mult</c>
	/// labeled alternative in <see cref="BasicParser.expr1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr1Mult([NotNull] BasicParser.Expr1MultContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expr1Mult</c>
	/// labeled alternative in <see cref="BasicParser.expr1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr1Mult([NotNull] BasicParser.Expr1MultContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expr1Div</c>
	/// labeled alternative in <see cref="BasicParser.expr1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr1Div([NotNull] BasicParser.Expr1DivContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expr1Div</c>
	/// labeled alternative in <see cref="BasicParser.expr1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr1Div([NotNull] BasicParser.Expr1DivContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expr2Empty</c>
	/// labeled alternative in <see cref="BasicParser.expr1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr2Empty([NotNull] BasicParser.Expr2EmptyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expr2Empty</c>
	/// labeled alternative in <see cref="BasicParser.expr1"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr2Empty([NotNull] BasicParser.Expr2EmptyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expr2Par</c>
	/// labeled alternative in <see cref="BasicParser.expr2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr2Par([NotNull] BasicParser.Expr2ParContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expr2Par</c>
	/// labeled alternative in <see cref="BasicParser.expr2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr2Par([NotNull] BasicParser.Expr2ParContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expr2Num</c>
	/// labeled alternative in <see cref="BasicParser.expr2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr2Num([NotNull] BasicParser.Expr2NumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expr2Num</c>
	/// labeled alternative in <see cref="BasicParser.expr2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr2Num([NotNull] BasicParser.Expr2NumContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expr2Var</c>
	/// labeled alternative in <see cref="BasicParser.expr2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr2Var([NotNull] BasicParser.Expr2VarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expr2Var</c>
	/// labeled alternative in <see cref="BasicParser.expr2"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr2Var([NotNull] BasicParser.Expr2VarContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Grammar
