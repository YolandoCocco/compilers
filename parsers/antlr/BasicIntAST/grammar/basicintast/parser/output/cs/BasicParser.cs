//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\wellington\projects\lectures\compilers\parsers\antlr\BasicIntAST\grammar\basicintast\parser\Basic.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Grammar {

package basicintast.parser;
import basicintast.util.*;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class BasicParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IF=1, ELSE=2, GT=3, LT=4, EQ=5, GE=6, LE=7, NE=8, PLUS=9, MINUS=10, MULT=11, 
		DIV=12, OPEN=13, CLOSE=14, OPEN_BL=15, CLOSE_BL=16, IS=17, EOL=18, PRINT=19, 
		READ=20, NUM=21, VAR=22, STR=23, WS=24;
	public const int
		RULE_program = 0, RULE_stmt = 1, RULE_cond = 2, RULE_condExpr = 3, RULE_block = 4, 
		RULE_print = 5, RULE_read = 6, RULE_attr = 7, RULE_expr = 8, RULE_expr1 = 9, 
		RULE_expr2 = 10;
	public static readonly string[] ruleNames = {
		"program", "stmt", "cond", "condExpr", "block", "print", "read", "attr", 
		"expr", "expr1", "expr2"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'else'", "'>'", "'<'", "'=='", "'>='", "'<='", "'!='", 
		"'+'", "'-'", "'*'", "'/'", "'('", "')'", "'{'", "'}'", "'='", "';'", 
		"'print'", "'read'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "ELSE", "GT", "LT", "EQ", "GE", "LE", "NE", "PLUS", "MINUS", 
		"MULT", "DIV", "OPEN", "CLOSE", "OPEN_BL", "CLOSE_BL", "IS", "EOL", "PRINT", 
		"READ", "NUM", "VAR", "STR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Basic.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BasicParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BasicParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BasicParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	 
		public ProgramContext() { }
		public virtual void CopyFrom(ProgramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgramStmtContext : ProgramContext {
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public ProgramStmtContext(ProgramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterProgramStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitProgramStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			_localctx = new ProgramStmtContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 22; stmt();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << OPEN) | (1L << PRINT) | (1L << READ) | (1L << NUM) | (1L << VAR))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StmtExprContext : StmtContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(BasicParser.EOL, 0); }
		public StmtExprContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStmtExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStmtExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtAttrContext : StmtContext {
		public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(BasicParser.EOL, 0); }
		public StmtAttrContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStmtAttr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStmtAttr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtAttr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtCondContext : StmtContext {
		public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		public StmtCondContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStmtCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStmtCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtPrintContext : StmtContext {
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(BasicParser.EOL, 0); }
		public StmtPrintContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStmtPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStmtPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtPrint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StmtReadContext : StmtContext {
		public ReadContext read() {
			return GetRuleContext<ReadContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(BasicParser.EOL, 0); }
		public StmtReadContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterStmtRead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitStmtRead(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmtRead(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 2, RULE_stmt);
		try {
			State = 40;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new StmtPrintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 27; print();
				State = 28; Match(EOL);
				}
				break;
			case 2:
				_localctx = new StmtReadContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 30; read();
				State = 31; Match(EOL);
				}
				break;
			case 3:
				_localctx = new StmtAttrContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 33; attr();
				State = 34; Match(EOL);
				}
				break;
			case 4:
				_localctx = new StmtExprContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 36; expr();
				State = 37; Match(EOL);
				}
				break;
			case 5:
				_localctx = new StmtCondContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 39; cond();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
	 
		public CondContext() { }
		public virtual void CopyFrom(CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStmtContext : CondContext {
		public BlockContext b1;
		public ITerminalNode IF() { return GetToken(BasicParser.IF, 0); }
		public ITerminalNode OPEN() { return GetToken(BasicParser.OPEN, 0); }
		public CondExprContext condExpr() {
			return GetRuleContext<CondExprContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(BasicParser.CLOSE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfStmtContext(CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseStmtContext : CondContext {
		public BlockContext b1;
		public BlockContext b2;
		public ITerminalNode IF() { return GetToken(BasicParser.IF, 0); }
		public ITerminalNode OPEN() { return GetToken(BasicParser.OPEN, 0); }
		public CondExprContext condExpr() {
			return GetRuleContext<CondExprContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(BasicParser.CLOSE, 0); }
		public ITerminalNode ELSE() { return GetToken(BasicParser.ELSE, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfElseStmtContext(CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterIfElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitIfElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		CondContext _localctx = new CondContext(Context, State);
		EnterRule(_localctx, 4, RULE_cond);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; Match(IF);
				State = 43; Match(OPEN);
				State = 44; condExpr();
				State = 45; Match(CLOSE);
				State = 46; ((IfStmtContext)_localctx).b1 = block();
				}
				break;
			case 2:
				_localctx = new IfElseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; Match(IF);
				State = 49; Match(OPEN);
				State = 50; condExpr();
				State = 51; Match(CLOSE);
				State = 52; ((IfElseStmtContext)_localctx).b1 = block();
				State = 53; Match(ELSE);
				State = 54; ((IfElseStmtContext)_localctx).b2 = block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondExprContext : ParserRuleContext {
		public CondExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condExpr; } }
	 
		public CondExprContext() { }
		public virtual void CopyFrom(CondExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondRelOpContext : CondExprContext {
		public IToken relop;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GT() { return GetToken(BasicParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(BasicParser.LT, 0); }
		public ITerminalNode EQ() { return GetToken(BasicParser.EQ, 0); }
		public ITerminalNode GE() { return GetToken(BasicParser.GE, 0); }
		public ITerminalNode LE() { return GetToken(BasicParser.LE, 0); }
		public ITerminalNode NE() { return GetToken(BasicParser.NE, 0); }
		public CondRelOpContext(CondExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterCondRelOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitCondRelOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondRelOp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondExpresionContext : CondExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CondExpresionContext(CondExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterCondExpresion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitCondExpresion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondExpresion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondExprContext condExpr() {
		CondExprContext _localctx = new CondExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_condExpr);
		int _la;
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new CondExpresionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; expr();
				}
				break;
			case 2:
				_localctx = new CondRelOpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; expr();
				State = 60;
				((CondRelOpContext)_localctx).relop = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << EQ) | (1L << GE) | (1L << LE) | (1L << NE))) != 0)) ) {
					((CondRelOpContext)_localctx).relop = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 61; expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockStmtContext : BlockContext {
		public ITerminalNode OPEN_BL() { return GetToken(BasicParser.OPEN_BL, 0); }
		public ProgramContext program() {
			return GetRuleContext<ProgramContext>(0);
		}
		public ITerminalNode CLOSE_BL() { return GetToken(BasicParser.CLOSE_BL, 0); }
		public BlockStmtContext(BlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		try {
			_localctx = new BlockStmtContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(OPEN_BL);
			State = 66; program();
			State = 67; Match(CLOSE_BL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
	 
		public PrintContext() { }
		public virtual void CopyFrom(PrintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintStrContext : PrintContext {
		public ITerminalNode PRINT() { return GetToken(BasicParser.PRINT, 0); }
		public ITerminalNode STR() { return GetToken(BasicParser.STR, 0); }
		public PrintStrContext(PrintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrintStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrintStr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintExprContext : PrintContext {
		public ITerminalNode PRINT() { return GetToken(BasicParser.PRINT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintExprContext(PrintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterPrintExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitPrintExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 10, RULE_print);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new PrintStrContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; Match(PRINT);
				State = 70; Match(STR);
				}
				break;
			case 2:
				_localctx = new PrintExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; Match(PRINT);
				State = 72; expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadContext : ParserRuleContext {
		public ReadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_read; } }
	 
		public ReadContext() { }
		public virtual void CopyFrom(ReadContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ReadVarContext : ReadContext {
		public ITerminalNode READ() { return GetToken(BasicParser.READ, 0); }
		public ITerminalNode VAR() { return GetToken(BasicParser.VAR, 0); }
		public ReadVarContext(ReadContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterReadVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitReadVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadContext read() {
		ReadContext _localctx = new ReadContext(Context, State);
		EnterRule(_localctx, 12, RULE_read);
		try {
			_localctx = new ReadVarContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(READ);
			State = 76; Match(VAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
	 
		public AttrContext() { }
		public virtual void CopyFrom(AttrContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AttrExprContext : AttrContext {
		public ITerminalNode VAR() { return GetToken(BasicParser.VAR, 0); }
		public ITerminalNode IS() { return GetToken(BasicParser.IS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AttrExprContext(AttrContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterAttrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitAttrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(Context, State);
		EnterRule(_localctx, 14, RULE_attr);
		try {
			_localctx = new AttrExprContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(VAR);
			State = 79; Match(IS);
			State = 80; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprPlusContext : ExprContext {
		public Expr1Context expr1() {
			return GetRuleContext<Expr1Context>(0);
		}
		public ITerminalNode PLUS() { return GetToken(BasicParser.PLUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprPlusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExprPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExprPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr1EmptyContext : ExprContext {
		public Expr1Context expr1() {
			return GetRuleContext<Expr1Context>(0);
		}
		public Expr1EmptyContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExpr1Empty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExpr1Empty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr1Empty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprMinusContext : ExprContext {
		public Expr1Context expr1() {
			return GetRuleContext<Expr1Context>(0);
		}
		public ITerminalNode MINUS() { return GetToken(BasicParser.MINUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprMinusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExprMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExprMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprMinus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_expr);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new ExprPlusContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; expr1();
				State = 83; Match(PLUS);
				State = 84; expr();
				}
				break;
			case 2:
				_localctx = new ExprMinusContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 86; expr1();
				State = 87; Match(MINUS);
				State = 88; expr();
				}
				break;
			case 3:
				_localctx = new Expr1EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 90; expr1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr1Context : ParserRuleContext {
		public Expr1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr1; } }
	 
		public Expr1Context() { }
		public virtual void CopyFrom(Expr1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr2EmptyContext : Expr1Context {
		public Expr2Context expr2() {
			return GetRuleContext<Expr2Context>(0);
		}
		public Expr2EmptyContext(Expr1Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExpr2Empty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExpr2Empty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr2Empty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr1MultContext : Expr1Context {
		public Expr2Context expr2() {
			return GetRuleContext<Expr2Context>(0);
		}
		public ITerminalNode MULT() { return GetToken(BasicParser.MULT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr1MultContext(Expr1Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExpr1Mult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExpr1Mult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr1Mult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr1DivContext : Expr1Context {
		public Expr2Context expr2() {
			return GetRuleContext<Expr2Context>(0);
		}
		public ITerminalNode DIV() { return GetToken(BasicParser.DIV, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr1DivContext(Expr1Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExpr1Div(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExpr1Div(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr1Div(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr1Context expr1() {
		Expr1Context _localctx = new Expr1Context(Context, State);
		EnterRule(_localctx, 18, RULE_expr1);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new Expr1MultContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; expr2();
				State = 94; Match(MULT);
				State = 95; expr();
				}
				break;
			case 2:
				_localctx = new Expr1DivContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 97; expr2();
				State = 98; Match(DIV);
				State = 99; expr();
				}
				break;
			case 3:
				_localctx = new Expr2EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 101; expr2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr2Context : ParserRuleContext {
		public Expr2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr2; } }
	 
		public Expr2Context() { }
		public virtual void CopyFrom(Expr2Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr2VarContext : Expr2Context {
		public ITerminalNode VAR() { return GetToken(BasicParser.VAR, 0); }
		public Expr2VarContext(Expr2Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExpr2Var(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExpr2Var(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr2Var(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr2NumContext : Expr2Context {
		public ITerminalNode NUM() { return GetToken(BasicParser.NUM, 0); }
		public Expr2NumContext(Expr2Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExpr2Num(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExpr2Num(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr2Num(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr2ParContext : Expr2Context {
		public ITerminalNode OPEN() { return GetToken(BasicParser.OPEN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(BasicParser.CLOSE, 0); }
		public Expr2ParContext(Expr2Context context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.EnterExpr2Par(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBasicListener typedListener = listener as IBasicListener;
			if (typedListener != null) typedListener.ExitExpr2Par(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicVisitor<TResult> typedVisitor = visitor as IBasicVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr2Par(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr2Context expr2() {
		Expr2Context _localctx = new Expr2Context(Context, State);
		EnterRule(_localctx, 20, RULE_expr2);
		try {
			State = 110;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN:
				_localctx = new Expr2ParContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; Match(OPEN);
				State = 105; expr();
				State = 106; Match(CLOSE);
				}
				break;
			case NUM:
				_localctx = new Expr2NumContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 108; Match(NUM);
				}
				break;
			case VAR:
				_localctx = new Expr2VarContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 109; Match(VAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1A', 's', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x6', '\x2', '\x1A', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x1B', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '+', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', ';', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x42', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'L', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '^', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', 'i', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x5', '\f', 'q', '\n', '\f', '\x3', '\f', '\x2', 
		'\x2', '\r', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x2', '\x3', '\x3', '\x2', '\x5', '\n', '\x2', 'u', '\x2', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x4', '*', '\x3', '\x2', '\x2', '\x2', 
		'\x6', ':', '\x3', '\x2', '\x2', '\x2', '\b', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x43', '\x3', '\x2', '\x2', '\x2', '\f', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'M', '\x3', '\x2', '\x2', '\x2', '\x10', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\x12', ']', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'h', '\x3', '\x2', '\x2', '\x2', '\x16', 'p', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x1A', '\x5', '\x4', '\x3', '\x2', '\x19', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x5', '\f', 
		'\a', '\x2', '\x1E', '\x1F', '\a', '\x14', '\x2', '\x2', '\x1F', '+', 
		'\x3', '\x2', '\x2', '\x2', ' ', '!', '\x5', '\xE', '\b', '\x2', '!', 
		'\"', '\a', '\x14', '\x2', '\x2', '\"', '+', '\x3', '\x2', '\x2', '\x2', 
		'#', '$', '\x5', '\x10', '\t', '\x2', '$', '%', '\a', '\x14', '\x2', '\x2', 
		'%', '+', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x5', '\x12', '\n', 
		'\x2', '\'', '(', '\a', '\x14', '\x2', '\x2', '(', '+', '\x3', '\x2', 
		'\x2', '\x2', ')', '+', '\x5', '\x6', '\x4', '\x2', '*', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '*', ' ', '\x3', '\x2', '\x2', '\x2', '*', '#', '\x3', 
		'\x2', '\x2', '\x2', '*', '&', '\x3', '\x2', '\x2', '\x2', '*', ')', '\x3', 
		'\x2', '\x2', '\x2', '+', '\x5', '\x3', '\x2', '\x2', '\x2', ',', '-', 
		'\a', '\x3', '\x2', '\x2', '-', '.', '\a', '\xF', '\x2', '\x2', '.', '/', 
		'\x5', '\b', '\x5', '\x2', '/', '\x30', '\a', '\x10', '\x2', '\x2', '\x30', 
		'\x31', '\x5', '\n', '\x6', '\x2', '\x31', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\a', '\x3', '\x2', '\x2', '\x33', '\x34', '\a', '\xF', 
		'\x2', '\x2', '\x34', '\x35', '\x5', '\b', '\x5', '\x2', '\x35', '\x36', 
		'\a', '\x10', '\x2', '\x2', '\x36', '\x37', '\x5', '\n', '\x6', '\x2', 
		'\x37', '\x38', '\a', '\x4', '\x2', '\x2', '\x38', '\x39', '\x5', '\n', 
		'\x6', '\x2', '\x39', ';', '\x3', '\x2', '\x2', '\x2', ':', ',', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x32', '\x3', '\x2', '\x2', '\x2', ';', '\a', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x42', '\x5', '\x12', '\n', '\x2', '=', 
		'>', '\x5', '\x12', '\n', '\x2', '>', '?', '\t', '\x2', '\x2', '\x2', 
		'?', '@', '\x5', '\x12', '\n', '\x2', '@', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '<', '\x3', '\x2', '\x2', '\x2', '\x41', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\t', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', 
		'\a', '\x11', '\x2', '\x2', '\x44', '\x45', '\x5', '\x2', '\x2', '\x2', 
		'\x45', '\x46', '\a', '\x12', '\x2', '\x2', '\x46', '\v', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\a', '\x15', '\x2', '\x2', 'H', 'L', '\a', '\x19', 
		'\x2', '\x2', 'I', 'J', '\a', '\x15', '\x2', '\x2', 'J', 'L', '\x5', '\x12', 
		'\n', '\x2', 'K', 'G', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\r', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\x16', 
		'\x2', '\x2', 'N', 'O', '\a', '\x18', '\x2', '\x2', 'O', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'Q', '\a', '\x18', '\x2', '\x2', 'Q', 'R', '\a', 
		'\x13', '\x2', '\x2', 'R', 'S', '\x5', '\x12', '\n', '\x2', 'S', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x5', '\x14', '\v', '\x2', 'U', 
		'V', '\a', '\v', '\x2', '\x2', 'V', 'W', '\x5', '\x12', '\n', '\x2', 'W', 
		'^', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x5', '\x14', '\v', '\x2', 
		'Y', 'Z', '\a', '\f', '\x2', '\x2', 'Z', '[', '\x5', '\x12', '\n', '\x2', 
		'[', '^', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\x5', '\x14', '\v', 
		'\x2', ']', 'T', '\x3', '\x2', '\x2', '\x2', ']', 'X', '\x3', '\x2', '\x2', 
		'\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', '^', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\x5', '\x16', '\f', '\x2', '`', '\x61', '\a', 
		'\r', '\x2', '\x2', '\x61', '\x62', '\x5', '\x12', '\n', '\x2', '\x62', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x5', '\x16', '\f', 
		'\x2', '\x64', '\x65', '\a', '\xE', '\x2', '\x2', '\x65', '\x66', '\x5', 
		'\x12', '\n', '\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', 'i', 
		'\x5', '\x16', '\f', '\x2', 'h', '_', '\x3', '\x2', '\x2', '\x2', 'h', 
		'\x63', '\x3', '\x2', '\x2', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 
		'i', '\x15', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\xF', '\x2', 
		'\x2', 'k', 'l', '\x5', '\x12', '\n', '\x2', 'l', 'm', '\a', '\x10', '\x2', 
		'\x2', 'm', 'q', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\a', '\x17', '\x2', 
		'\x2', 'o', 'q', '\a', '\x18', '\x2', '\x2', 'p', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'q', '\x17', '\x3', '\x2', '\x2', '\x2', '\n', '\x1B', '*', ':', 
		'\x41', 'K', ']', 'h', 'p',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Grammar
